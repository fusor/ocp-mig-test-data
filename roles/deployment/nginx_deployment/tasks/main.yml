---
- name: Deploy nginx-deployment pod using deployment resource
  k8s:
    state: present
    definition: "{{ lookup('file', 'nginx-deployment-template.yml')}}"

- name: Check for deployment presence
  k8s_facts:
    kind: Deployment
    api_version: apps/v1
    namespace: nginx-deployment
    label_selectors: "app=nginx-deployment"
  register: deploy
  until:  deploy.get("resources", [])
          and deploy.resources[0].get("status", {}).get("replicas", -1) == deploy.resources[0].get("status", {}).get("availableReplicas", 0)
  retries: 10
  delay: 10

# Create a backup
- name: Create ark backup of nginx-deployment pod
  k8s:
    state : present
    definition: "{{ lookup('file', 'create-backup-nginx-deployment.yml')}}"

- name: Wait for backup to complete
  k8s_facts:
    kind: Backup
    api_version: ark.heptio.com/v1
    namespace: heptio-ark
    name: "nginx-deployment-backup"
  register: backup
  until:  backup.get("resources", [])
          and backup.resources[0].get("status", {}).get("phase", "") == "Completed"
  retries: 10
  delay: 5

# Simulate DR and restore
- name: Delete nginx-deployment pod
  k8s:
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: nginx-deployment

- name: Wait 2 minutes for namespace to be deleted
  k8s_facts:
    kind: Namespace
    api_version: v1
    name: nginx-deployment
  register: ns
  until: not ns.get("resources", [""])
  retries: 10
  delay: 5

# Restore part
- name: Restore service
  when: not travisCI
  block:
    - name: Create ark restore of nginx-deployment pod
      k8s:
        state: present
        definition: "{{ lookup('file', 'create-restore-nginx-deployment.yml')}}"

    - name: Wait for restore to finish
      k8s_facts:
        kind: Restore
        api_version: ark.heptio.com/v1
        namespace: heptio-ark
        name: nginx-deployment-restore
      register: restore
      until:  restore.get("resources", [])
              and restore.resources[0].get("status", {}).get("phase", "") == "Completed"
      retries: 20
      delay: 10

    - name: Check for deployment presence
      k8s_facts:
        kind: Deployment
        api_version: apps/v1
        namespace: nginx-deployment
        label_selector: "app=nginx-deployment"
      register: deploy
      until:  deploy.get("resources", [])
              and deploy.resources[0].get("spec", {}).get("replicas", -1) == deploy.resources[0].get("status", {}).get("availableReplicas", 0)
      retries: 10
      delay: 10

    - name: Delete ark restore of nginx-deployment pod (workaround to use common name for restore)
      k8s:
        state: absent
        definition: "{{ lookup('file', 'create-restore-nginx-deployment.yml')}}"
