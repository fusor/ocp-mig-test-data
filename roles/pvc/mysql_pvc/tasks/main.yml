- name: Create resources
  block:
    - name: Deploy mysql with pvc from yml
      k8s:
        state : present
        definition: "{{ lookup('file', 'mysql-persistent-template.yml')}}"

    - name: Check if deployed and bound
      include: check.yml

    - name: Populate the database with test data
      block:
        - name: Populating db with data
          vars:
            pod_name: "{{ pod.resources[0].get('metadata', {}).get('name', '') }}"
            src: "{{ playbook_dir }}/roles/pvc/mysql_pvc/files/data.sql"
            dest: /opt/app-root/src
          shell: |
                  oc cp -n mysql-persistent {{ src }} {{ pod_name }}:{{ dest }}
                  oc exec -n mysql-persistent {{ pod_name }} -- /bin/bash -c "mysql -uMYSQL_USER -pMYSQL_PASSWORD MYSQL_DATABASE < {{ dest }}/data.sql"
        
        - name: Flush tables with read lock before backup
          vars:
            pod_name: "{{ pod.resources[0].get('metadata', {}).get('name', '') }}"
          shell: |
                  oc exec -n mysql-persistent {{ pod_name }} -- /bin/bash -c "echo 'FLUSH TABLES WITH READ LOCK;' > lock.sql"
                  oc exec -n mysql-persistent {{ pod_name }} -- /bin/bash -c "mysql -u root < lock.sql"
      when: with_data

  when: with_resources

- name: Create a backup
  include_role:
    name: backup
  when: with_backup

- name: Unlock tables after backup
  vars:
    pod_name: "{{ pod.resources[0].get('metadata', {}).get('name', '') }}"
  shell: |
          oc exec -n mysql-persistent {{ pod_name }} -- /bin/bash -c "echo 'UNLOCK TABLES;' > unlock.sql"
          oc exec -n mysql-persistent {{ pod_name }} -- /bin/bash -c "mysql -u root < unlock.sql"
  when: with_data

- name: Restore service
  when: with_restore
  block:
    - name: Start restoring
      include_role:
        name: restore

    - name: Check if restored and bound
      include: check.yml
