- name: Deploy mysql with pvc
  block:
    - name: Deploy mysql with pvc from yml
      k8s:
        state : present
        definition: "{{ lookup('file', 'mysql-persistent-template.yml')}}"

    - name: Wait for mysql with pvc deployment
      k8s_facts:
        kind: Pod
        namespace: mysql-persistent
        label_selectors: "deployment=mysql-1"
      register: pod
      until: pod.get("resources", []) and pod.resources[0].get("status", {}).get("phase", "") == "Running"
      retries: 10
      delay: 15

    - name: Check if volume is bound
      k8s_facts:
        kind: PersistentVolumeClaim
        namespace: mysql-persistent
        label_selectors: "app=mysql"
      register: volume
      until: volume.get("resources", []) and volume.resources[0].get("status", {}).get("phase", "") == "Bound"
      retries: 10
      delay: 15

- name: Create a backup
  when: with_backup
  block:
    - name: Create backup
      include_role:
        name: backup

- name: Restore service
  when: with_restore
  block:
    - name: Start restoring 
      include_role:
        name: restore

    - name: Wait for mysql with pvc deployment
      k8s_facts:
        kind: Pod
        namespace: mysql-persistent
        label_selectors: "deployment=mysql-1"
      register: pod
      until: pod.get("resources", []) and pod.resources[0].get("status", {}).get("phase", "") == "Running"
      retries: 10
      delay: 15

    - name: Check if volume is restored and bound
      k8s_facts:
        kind: PersistentVolumeClaim
        namespace: mysql-persistent
        label_selectors: "app=mysql"
      register: volume
      until: volume.get("resources", []) and volume.get("status", {}).get("phase", "") == "Bound"
      retries: 10
      delay: 15
