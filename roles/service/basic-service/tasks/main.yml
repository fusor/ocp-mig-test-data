---
- name: Create service and backup
  block:
    - name: Create service example
      k8s:
        state: present
        definition: "{{ lookup('file', 'service-template.yml') }}"

    - name: Wait 1 minute for services become available
      k8s_facts:
        kind: Service
        api_version: v1
        namespace: service-example
        label_selectors: "name=my-service"
      register: deploy
      until: deploy.get("resources", []) and deploy.resources | length == 5
      retries: 12
      delay: 5

    - name: Wait 2 minute for deployment
      k8s_facts:
        kind: Deployment
        api_version: v1
        namespace: service-example
        label_selectors: "name=my-service"
      register: deploy
      until:  deploy.get("resources", [])
              and deploy.resources[0].get('status', {}).get('availableReplicas', -1) == deploy.resources[0].get("spec", {}).get('replicas', -2)
      retries: 24
      delay: 5

      # Backup part
    - name: Create ark backup
      k8s:
        state: present
        definition: "{{ lookup('file', 'create-backup-basic-service.yml') }}"

    - name: Wait for ark to finish backup
      k8s_facts:
        kind: Backup
        namespace: heptio-ark
        name: service-basic-backup
      register: backup
      until:  backup.get("resources", [])
              and backup.resources[0].get("status", {}).get("phase", 0) == 'Completed'
      retries: 20
      delay: 5

    - name: Delete service namespace
      k8s:
        state: absent
        definition:
          kind: Namespace
          metadata:
            name: service-example

    - name: Wait for delete completion
      k8s_facts:
        kind: Namespace
        name: service-example
      register: delete
      until: delete.resources | length > 0
      retries: 20
      delay: 6

# Restore part
- name: Restore service
  when: not travisCI
  block:
    - name: Restore ark backup
      k8s:
        state: present
        definition: "{{ lookup('file', 'restore-backup-basic-service.yml') }}"

    - name: Wait for restore to finish
      k8s_facts:
        kind: Restore
        namespace: heptio-ark
        name: service-basic-backup
      register: restore
      until: restore and restore.resources[0].get("status", {}).get("phase", 0) == "Completed"
      retries: 20
      delay: 6

    - name: Wait 2 minutes for service to appear
      k8s_facts:
        api_version: v1
        kind: Service
        namespace: service-example
      register: svc
      until: svc and (svc.resources | length == 5)
      retries: 10
      delay: 10

    - name: Remove old restore
      k8s:
        state: absent
        definition: "{{ lookup('file', 'restore-backup-basic-service.yml') }}"
